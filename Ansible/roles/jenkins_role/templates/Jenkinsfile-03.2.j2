pipeline {
  agent {
      label "master"
  }

  tools {
      maven "Maven"
  }

  environment {
    NEXUS_VERSION = "nexus3"
    NEXUS_PROTOCOL = "http"
    NEXUS_REPOSITORY = "maven-snapshots"
    NEXUS_CREDENTIAL_ID = "nexus-cred"
  }

  stages {
    stage("clone code") {
      steps {
        script {
          git credentialsId: "{{ credentials }}",
          branch: "{{ targetBranch }}",
          url: "{{ gitUrl }}";
        }
      }
    }
    stage("mvn build") {
      steps {
        script {
          sh "mvn package -DskipTests=true"
        }
      }
    }
    stage("get vars") {
      steps {
        script {
          env.NEXUS_IP = sh (
            script: 'gcloud secrets versions access "{{ version_id }}" --secret="{{ nexus_ip_secret }}"',
            returnStdout: true
          ).trim()
        }
      }
    }
    stage("publish to nexus") {
      steps {
        script {
          // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
          pom = readMavenPom file: "pom.xml";
          // Find built artifact under target folder
          filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
          // Print some info from the artifact found
          echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
          // Extract the path from the File found
          artifactPath = filesByGlob[0].path;
          // Assign to a boolean response verifying If the artifact name exists
          artifactExists = fileExists artifactPath;
          if(artifactExists) {
            echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
            nexusArtifactUploader(
              nexusVersion: NEXUS_VERSION,
              protocol: NEXUS_PROTOCOL,
              nexusUrl: "${NEXUS_IP}:8081",
              groupId: pom.groupId,
              version: pom.version,
              repository: NEXUS_REPOSITORY,
              credentialsId: NEXUS_CREDENTIAL_ID,
              artifacts: [
                // Artifact generated such as .jar, .ear and .war files.
                [artifactId: pom.artifactId,
                classifier: '',
                file: artifactPath,
                type: pom.packaging],
                // Lets upload the pom.xml file for additional information for Transitive dependencies
                [artifactId: pom.artifactId,
                classifier: '',
                file: "pom.xml",
                type: "pom"]
              ]
            );
          } else {
            error "*** File: ${artifactPath}, could not be found";
          }
        }
      }
    }
    stage("downstream") {
      steps {
        build(job: 'packer_build')
      }
    }
  }

  post {
    cleanup {
      cleanWs()
    }
  }
}
